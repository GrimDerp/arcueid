\input texinfo
@c -*-texinfo-*-
@c -*-Encoding: utf-8-*-

@setfilename arcueid.info
@include version.texi
@settitle Arcueid @value{VERSION}
@documentencoding UTF-8

@paragraphindent 0

@c don't indent the paragraphs.
@paragraphindent 0

@c Unify some of the indices.
@syncodeindex tp fn
@syncodeindex pg cp

@comment %**end of header
@finalout
@copying
This manual is last updated @value{UPDATED} for version
@value{VERSION} of Arcueid.

Copyright @copyright{} 2010 Rafael R. Sevilla

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
copy of the license is included in the section entitled ``GNU Free
Documentation License''.
@end quotation
@end copying

@titlepage
@title Arcueid
@subtitle C-based Interpreter for Paul Graham's Arc Dialect of Lisp
@subtitle for version @value{VERSION}, @value{UPDATED}
@sp 7
@author Rafael R. Sevilla (@email{dido@@imperium.ph})

@page
@vskip 0pt plus 1filll
@insertcopying

@end titlepage

@contents

@ifnottex
@node Top, Preface, (dir), (dir)
@top Arcueid

This manual is for Arcueid, version @value{VERSION}
@end ifnottex

@menu
* Preface::                     What is Arcueid
* Virtual Machine Design::      The design of the virtual machine
* Arcueid Extensions::          Extensions to Reference Arc
* Compact Information Expression Layer (CIEL)::  Serialization format

@detailmenu
 --- The Detailed Node Listing ---

Virtual Machine Design

* Object Representations::      
* Registers::                   
* Applying a function::         

Arcueid Extensions

* Reader Extensions
* Missing functions

Compact Information Expression Layer (CIEL)

* CIEL Instruction Set::        

CIEL Instruction Set

* Integer representation::      

@end detailmenu
@end menu

@node Preface, Virtual Machine Design, Top, Top
@chapter Preface

This document describes Arcueid, a C-based interpreter for Paul Graham's
Arc dialect of Lisp.  It describes both the Arc language, extensions
that Arcueid provides over the standard reference Scheme-based
interpreter, and how to embed the interpreter in your own programs and
extend its functionality.

Arcueid is named for Arcueid Brunestud, a character in the TYPE MOON
visual novel and anime Shingetsutan Tsukihime (also known as Tsukihime,
Lunar Legend).  The name was just too good to pass up for this project.

@node Virtual Machine Design, Compact Information Expression Layer (CIEL), Preface, Top
@chapter Virtual Machine Design

This chapter, such as it is,  contains my design notes on the Arcueid
virtual machine.  The design of the virtual machine and interpreter
system is inspired in large part from the study of several other
interpreter-based systems, such as the OCaml virtual machine (memory
management and instruction set), Inferno's Dis interpreter (garbage
collector and threading model), XScheme by Dave Betz (parser and
instruction set), TinyScheme by Dimitrios Souflis (miscellaneous
structural design), and Scheme48 by Richard Kelsey and Jonathan Rees
(miscellaneous ideas mostly from their papers).  These interpreters
are either very well documented or are small enough to be easily
understood, so anyone looking at my code here should not be surprised
to see some similarities in structure.

@menu
* Object Representations::      
* Registers::                   
* Applying a function::         
@end menu

@node Object Representations, Registers, Virtual Machine Design, Virtual Machine Design
@section Object Representations

The following object representations are used:

Closures are represented as conses.  The car of the cons is the compiled
function and its cdr is the saved environment.

Compiled functions are represented as vectors.  The element at offset 0
is the bytecode itself, as required by the interpreter.  The element at
offset 1 is the function name.  The element at offset 2 is a list of
symbols giving the names of the function arguments.  The elements at
offsets above 2 are the literals referred to by the compiled bytecodes.

Environments are represented as lists of vectors.  Each vector is an
environment frame.  The element at offset 0 is a list of the symbols
which are bound in that frame, and the remaining elements in the
environment are the values of the symbols.

Fixnums are tagged, so that bit 1 is always 1.  To convert a fixnum into
a normal C integer, one takes a right shift.  To convert a normal C
integer into a fixnum, one shifts to the left once and sets the low bit
of the number to 1.

Symbols are small integers whose low 8 bits are 0x0e.  There is a symbol
table and reverse symbol table hash that are used to transform symbols
back and forth to strings.

@node Registers, Applying a function, Object Representations, Virtual Machine Design
@section Registers

The virtual machine is, like many of its kind, a stack-based virtual
machine.  It possesses four registers:

@itemize @bullet
@item
An expression stack, called expr, which is a stack of values of
expressions that are being evaluated.  This is internally represented
as a vector, which is grown dynamically as necessary.

@item
A continuation register, which is a linked list of all the
me continuations in use within the interpreter.
@end itemize

@node Applying a function,  , Registers, Virtual Machine Design
@section Applying a function

When a function is applied, the value register contains the function
that is being applied, and the stack contains the values of the
parameters, and the argc register contains the number of these
parameters.  The continuation register also contains the continuation
that was saved by the caller (or by its caller, in the case of a tail
call).  When a function finishes, it should leave the value it wishes to
return in the value register.

@node Arcueid Extensions, Compact Information Expression Layer (CIEL), Virtual Machine Design, Top
@chapter Arcueid Extensions

Arcueid provides several language features not found in the reference
Arc implementation by Paul Graham and Robert Morris.  These extensions
are designed in such a way as not to interfere with normal Arc.

@menu
* Numeric Constants in Other Bases::
@end menu

@node Reader Extensions,  , Arcueid Extensions, Arcueid Extensions
@section Numeric Constants in Other Bases

Like reference Arc integer constants are decimal by default.  A
constant, however, may be specified with an explicit radix, consisting
of a decimal radix followed by the letter 'r' followed by the digits
of the number.  The radix is between 2 and 36 inclusive: digits above
10 in the number are expressed using the letters A to Z or a to z.


@node Compact Information Expression Layer (CIEL), Arcueid Extensions, Virtual Machine Design, Top
@chapter Compact Information Expression Layer (CIEL)

The Compact Information Expression Layer (CIEL)@footnote{Sorry, a
backronym from another Tsukihime character} is the serialization
format used by Arcueid, and is designed to be able to serialize any
arbitrarily complex Arcueid object.  Many of the ideas behind this
serialization format are derived from Python's serialization.

For the most part, the Compact Information Expression Language is a
simple creature, with no loops, tests, conditionals, arithmetic, or
function calls.  Opcodes are executed once each, from first to last,
until a HLT opcode is seen.

Like many virtual machines, CIEL is stack-based, and many instructions
will push Arcueid objects on the stack.  Other opcodes take objects
off the stack, possibly pushing new ones.  The final result of
deserialization is whatever object is left at the top of the stack
when the final HLT opcode is executed.

@menu
* CIEL Instruction Set::        
@end menu

@node CIEL Instruction Set,  , Compact Information Expression Layer (CIEL), Compact Information Expression Layer (CIEL)
@section CIEL Instruction Set

The CIEL instruction set is as follows.  This describes version 1 of
CIEL.

@table @code
@item ver
This instruction declares to the CIEL interpreter what version of the
CIEL instruction set the code is supposed to represent.  It is
followed by a 64-bit little endian number which gives the declared
version.  This should be the first instruction of any valid CIEL
program.

@item gnil
Push a nil on the stack

@item gtrue
Push a true on the stack

@item gint
Push an integer, which may become a fixnum or a bignum, depending
on the system interpreting the instruction, represented by the
following bytes, which are encoded in a self-delimiting form described
below @pxref{Integer representation}.

@item gflo
Push a floating point number, which is represented by the eight bytes
following, in IEEE-754 double precision binary form.

@item gchar
Push the Unicode character, represented by the four bytes following,
in UCS-4, little endian form.

@item gstr
Push a string.  The string is represented as an integer length
(magnitude only) which gives the number of characters in the string,
followed by the UTF-8 representation of the string.  Since integers
are of arbitrary size, this suffices to encode a string of arbitrary
length.

@item gsym
Push a symbol.  The representation of the following data is the same
as for a string.

@item crat
Pop two integers off the stack, numerator followed by denominator, and
push the rational number they represent.  It is an error if the two
values at the top of the stack are not integers.

@item ccomplex
Pop two floating point numbers off the stack, real followed by
complex, and push the complex number they represent.  It is an error
if the two values at the top of the stack are not floating point
numbers.

@item gtab
Push a reference to an empty table onto the stack.

@item ctadd
With a key, value, and a table on the stack in that order, add the key
and value mapping to the table.

@item dup
Duplicate the object at the top of the stack.  This will create a
duplicate of an atomic object, but will push a reference to a compound
object like a cons cell or 

@end table

@menu
* Integer representation::      
@end menu

@node Integer representation,  , CIEL Instruction Set, CIEL Instruction Set
@subsection Integer representation

Integers are represented in a self-delimiting form.  An integer is
stored in signed-magnitude little-endian form, with the low-order
portions appearing before the high-order portions.  The sign appears
as a single byte whose value should be either ASCII '+' (0x2b) or '-'
(0x2d).  Any other value is considered invalid.

The integer is divided into 63-bit portions, and each 63-bit portion
is stored in 64 bits (little endian), with the highest bit being 0 for
all but the the last such part, which is set to 1, so that the decoder
knows where to stop.  In the terminology used by GNU MP's
@code{mpz_export} and @code{mpz_import} functions, a 64-bit word size
is used, using little endian words, with least significant first, with
1 bit nails.

@bye

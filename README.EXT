This document explains how to make extension libraries for Arcueid.

Basic concepts
==============

Data in Arcueid are represented by the C type 'value'. Each value data
has its own data type, which one can obtain by using the TYPE function
defined as a static inline in arcueid.h.

Function definition
===================

To define an Arc function, the following function may be used:

arc_mkccode(arc *c, int argc, value (*func)())

The argc represents the number of arguments to the C function (a
Simple Foreign Function), which must be at most 8.  For example, with
an argc of 3, the function will be called as:

value func(arc *c, arg1, arg2, arg3)

where c is the Arcueid interpreter handle.

If argc is negative, it specifies the calling sequence, not the number
of arguments.

If argc is -1, the function will be called as:

value func(arc *c, int argc, value *argv)

where c is the Arcueid interpreter handle, argc is the actual number
of arguments, and argv is a C array of the arguments.

Simple foreign functions (with argc of -1 or higher) are recommended
only for simple functions that do not need to call other Arcueid
functions, are not long running, and will not perform long-running
I/O.  Such a function has the potential to unboundedly block the
interpreter and any garbage it produces will not be collected until
after the function terminates.

If argc is -2, the function is called an Arcueid Foreign Function and
will be called as:

int func(arc *c, value thr)

See the section on Arcueid foreign functions for how they are supposed
to be used.

Arcueid Foreign Functions
=========================

Arcueid foreign functions (AFFs) are the most general foreign function
interface available for Arcueid.  Simple foreign functions (SFFs) have
limitations in that they are unable to call native Arcueid functions,
yield control, or provide non-blocking I/O.  The AFF mechanism has all
these facilities and more: locally scoped variables and parameter
lists are also preserved across garbage collections, and it is
even possible to create continuations from them!  It is however, a
little tedious and error-prone to program them, and sometime a
preprocessor may be written that allows some syntactic sugar that will
make this interface easier to program and less error prone, similar to
Perl's XS language.

An AFF basically has the following structure:

AFFDEF(func)
{
  AARG(arg1, arg2);
  AOARG(optarg);
  ARARG(rest);
  AVAR(localvar);
  AFBEGIN;
  /* body of the function */
  AFEND;
}
AFFEND

AFFDEF creates a definition for a foreign function named func in this
example, which takes two non-optional arguments named arg1 and arg2,
one optional argument named optarg, and binds any further arguments in
a variable named rest.  A local variable named localvar is also
available.

A maximum of 8 arguments may be defined for each AARG/AOARG
definition, but if more are required, additional AARG/AOARG
definitions may be used.  This may be followed by any AVAR
definitions.  The ARARG definition must follow all of them.  This
order must be strictly followed or unpredictable results may occur,
and variables will not be accessible in their correct places.

Values of these arguments and local variables must be read with the AV
macro and written to with the WV macro.  Do not attempt to use the
names of variables directly: the actual values of these variables
(constants really) are offsets into the local environment created by
the AFBEGIN macro and have no meaning apart from that.

AV(arg1) returns the value of arg1.  WV(arg1, INT2FIX(3)) assigns 3 to
arg1.  The WV macro is used to enforce the write barrier required for
garbage collection purposes.

To call another Arcueid function, C or bytecode, one can use the
AFCALL macro, which takes the function object and any parameters it
might have.  The AFTCALL macro makes a tail call to an Arcueid
function, which never returns to its caller.  The AFCALL2/AFTCALL2
macros are similar, except that they take the arguments to be passed
to the function as a list.

The ARETURN function returns the value of its argument to the caller.
Note that one must NEVER use the C return keyword directly in an AFF.
Doing this will have unpredictable results because the return code of
an AFF is interpreted by the trampoline what to do next (in fact, the
AFCALL macros ironically *return* to the thread trampoline in order to
do what they do!).

The AYIELD macro can be used to yield the current thread's execution
and cause it to run other threads that may be running in the system.
The AIOWAITR and AIOWAITW macros get a file descriptor number, and
cause the thread running it to be blocked until the the file
descriptors specified are readable or writable respectively (the
thread scheduler does a select or equivalent system call to determine
when these file descriptors are ready).

A small number of ground rules must also be observed by AFFs:

1. You cannot use AFCALL/AFCALL2, AYIELD, or AIOWAITR/AIOWAITW inside
   of a switch statement.  Doing so will result in a cryptic syntax
   error.
2. AFCALL/AFCALL2/AFTCALL/AFTCALL2, AYIELD, AIOWAITR, or AIOWAIT2
   should never appear together on the same line. 
3. Do not define local variables named c, thr, __nargs__, __optargs__,
   __localvars__, or __restarg__.  These will conflict with the
   variables used by the AFF macros for bookkeeping.

Internally, these AFFs make use of Simon Tatham's C coroutine ideas
[1] to do what they do. They are called by an internal trampoline that
is executed for each thread.

[1] Simon Tatham. "Coroutines in C".
    http://www.chiark.greenend.org.uk/~sgtatham/coroutines.html

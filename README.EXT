This document explains how to make extension libraries for Arcueid.

Basic concepts
==============

Data in Arcueid are represented by the c type 'value'. Each value data
has its own data type.

Function definition
===================

To define an Arc function, the following function may be used:

arc_mkccode(arc *c, int argc, value (*func)())

The argc represents the number of arguments to the C function (a
Simple Foreign Function), which must be at most 8.  For example, with
an argc of 3, the function will be called as:

value func(arc *c, arg1, arg2, arg3)

where c is the Arcueid interpreter handle.

If argc is negative, it specifies the calling sequence, not the number
of arguments.

If argc is -1, the function will be called as:

value func(arc *c, int argc, value *argv)

where c is the Arcueid interpreter handle, argc is the actual number
of arguments, and argv is a C array of the arguments.

Simple foreign functions (with argc of -1 or higher) are recommended
only for simple functions that do not need to call other Arcueid
functions, are not long running, and will not perform long-running
I/O.  Such a function has the potential to unboundedly block the
interpreter and any garbage it produces will not be collected until
after the function terminates.

If argc is -2, the function is called an Arcueid Foreign Function and
will be called as:

int func(arc *c, value thr)

See the section on Arcueid foreign functions for how they are supposed
to be used.

Arcueid Foreign Functions
=========================

Arcueid foreign functions (AFFs) are the most general foreign function
interface available for Arcueid.  Simple foreign functions (SFFs) have
limitations in that they are unable to call native Arcueid functions,
yield control, provide non-blocking I/O.  The AFF mechanism has all
these facilities and more: locally scoped variables and parameter
lists are also preserved across garbage collections, and it is
possible to create continuations from them!

An AFF is declared as follows:

AFFDEF(test, arg1, arg2)
{
  AVAR(lvar);
  AFBEGIN;
  AV(lvar) = INT2FIX(FIX2INT(AV(arg1)) - FIX2INT(AV(arg2)));
  ARETURN(INT2FIX(AV(lvar)));
  AFEND;
}
AFFEND

The AFFDEF / AFFEND pair are macros that set up the foreign function.
It is a mistake to leave off the AFFEND marker; doing so produces all
sorts of strange errors when the code is compiled.  The AFFDEF macro
can only be used when one has from one to eight arguments.  If the
function has no arguments, the AFFDEF0 macro should be used instead.
The AFFDEF0 macro is also used if one requires more than eight
arguments, or a variable number of arguments: it will be necessary
then to extract arguments manually from the thread stack rather than
using these built-in macros to automatically create arguments and
assign them to variables.

Local variables are declared using the AVAR(...) macro.  All variables
defined with this macro are Arcueid values.  Up to eight variables may
be declared in this way: if more are required, just use additional
AVAR declarations.  Local variables and parameters are accessed using
the AV() macro.  This macro expands to a valid C lvalue and so may be
used as the target of an assignment.  The AVAR macro may only be used
before the AFBEGIN macro: using it outside of AFBEGIN has no effect.

The actual code of the function should appear between an AFBEGIN/AFEND
pair.  It is once again a mistake to leave off the AFEND, and doing so
will result in all sorts of strange errors on compilation.

Values may be applied using the AFCALL macro.  This macro takes a
value that may be applied as its first argument, and any arguments
that the function takes (this is, unlike the other macros,
unlimited).  It should in principle be possible to get the results of
the application of any value for which this makes sense to do.

It is also possible to yield execution using the AYIELD macro.  This
will end the current time slice and make other threads run instead.

To make the current thread wait on I/O, the AIOWAIT macro is used.  It
takes the file descriptor to wait on.

A small number of ground rules must also be observed by such a
function:

1. You cannot use AFCALL, AYIELD, or AIOWAIT inside of a switch
   statement.  Doing so will result in a cryptic syntax error.
2. AFCALL, AYIELD, and AIOWAIT should never appear together on the
   same line. 
3. Do not define local variables named c, thr, __vidx__, or
   __nparams__.  These will conflict with the variables used by the
   AFF macros.

For a function that needs more than eight parameters or a variable
number of parameters, the number of parameters actually passed may be
obtained by arc_thr_argc(c, thr).  A parameter may be obtained from
the stack using arc_thr_pop(c, thr), and this can be assigned to a
local variable if required.

[1] Simon Tatham. "Coroutines in C".
    http://www.chiark.greenend.org.uk/~sgtatham/coroutines.html

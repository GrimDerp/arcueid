* The Arc Runtime
   We want to be able to write as little of the runtime in C as
   possible.  Of course, unless we have an Arc to native compiler, or
   even a limited one analogous to Richard Kelsey's PreScheme, we have
   no choice but to write a few portions in C.  I don't yet have the
   chops or the time to make one like that now, but that would
   certainly be ideal, and then we'd have an Arc just like Scheme48.
** DONE base virtual machine [4/4]
   We need to rethink the structure of the virtual machine.  It now
   seems that vmgen might not have been such a good idea, and we
   should probably write our own interpreter core directly.
    - [X] Define virtual machine architecture
    - [X] Design interpreter core
	  The interpreter core should be flexible enough that we can
	  easily use switch threading, call threading, GCC labels as
	  values, or even assembly language.  Each instruction should
	  be separately implementable.
    - [X] Build code generation infrastructure
    - [X] Implement simple virtual machine [39/39]
      - [X] nop
      - [X] push
      - [X] pop
      - [X] ldl
      - [X] ldi
      - [X] ldg
      - [X] stg
      - [X] lde
      - [X] ste
      - [X] mvarg
      - [X] mvoarg
      - [X] mvrarg
      - [X] cont
      - [X] env
      - [X] apply
      - [X] ret
      - [X] jmp
      - [X] jt
      - [X] jf
      - [X] true
      - [X] nil
      - [X] hlt
      - [X] add
      - [X] sub
      - [X] mul
      - [X] div
      - [X] cons
      - [X] car
      - [X] cdr
      - [X] scar
      - [X] scdr
      - [X] spl
      - [X] is
      - [X] iso
      - [X] gt
      - [X] lt
      - [X] dup
      - [X] cls
      - [X] consr
** DONE memory allocator
    A very simple free-list based memory allocator.  There might be
    better algorithms out there but let's get a simple one out
    the door first and then worry about making it more efficient
    later.
** DONE garbage collector
    We use the Huelsbergen-Winterbottom VCGC algorithm.  We use it
    single-threaded exactly the way Inferno uses it, with
    interpretation interleaved with garbage collection.  Later on when
    we have real threads in the language we'll make it into a real
    threaded implementation with a real OS-level thread to do the
    marking and sweeping.
** DONE compiler in Arc
    Debugging and feature-completeness are all on the agenda of course.
** TODO basic data types [11/14]
    - [X] Nil
    - [X] True
    - [X] Numeric Types [5/5]
       - [X] fixnum
       - [X] bignum
       - [X] flonum
       - [X] complex
       - [X] rational
    - [X] Characters
    - [X] Strings
    - [X] Symbols
    - [X] Conses
    - [X] Tables
    - [X] Vectors
    - [ ] Tagged
    - [ ] Functions
    - [X] Input Ports
    - [X] Output Ports
    - [ ] Threads
** DONE Basic I/O primitives (src/io.c) [5/5]
    - [X] Input [4/4]
       - [X] readb
       - [X] readc
       - [X] peekc
	     Implemented in terms of ungetc
       - [X] ungetc - this is not part of standard Arc
	     Note that there is no ungetb function.  This is proving a
	     little tricky to implement.  Maybe what we should do is
	     simplify the semantics of ungetc so that it requires a
	     character to be unget'd, and the next call to readc OR
	     readb (yes, readb with a 'b'!) will return this
	     CHARACTER.  This saves us the trouble of decoding Unicode
	     all over again, and reinforces the maxim of never mixing
	     the b functions with the c functions.
    - [X] Output [2/2]
       - [X] writeb
       - [X] writec
    - [X] File I/O [3/3]
       - [X] infile
       - [X] outfile
       - [X] close
    - [X] String port I/O [3/3]
	  Note that doing readb/writeb or readc/writec on a string
	  port have the same effect.  Strings are made up of Unicode
	  characters so it would be quite messy to implement a
	  separate 'byte index' into what is made up of characters.
       - [X] instring
       - [X] outstring
       - [X] inside
    - [X] Seeking / telling [2/2]
	 Note that these essential functions are not available in
	 PG-Arc for some reason but will probably be necessary to
	 implement CIEL.
      - [X] seek
      - [X] tell
   These are the base I/O functions provided by the Arcueid C
   runtime.  PG-Arc provides a few more functions in Scheme that we
   write in Arc instead:
   - sread: The arc reader, which is in Arc for Arcueid
   - disp: The arc pretty printer, which is in Arc for Arcueid
   - write: Also the arc pretty printer
** TODO write a reader for CIEL files (src/ciel.c) [11/15]
   Our CIEL bytecode interpreter must at the very least support the
   instructions given in comp-bsdef.arc and be able to decode CIEL
   files generated therein.  This should produce code objects suitable
   for use by the interpreter.  The following instructions should be
   implemented:
   - [X] gnil
   - [X] gtrue
   - [X] gint
   - [X] gflo
   - [X] gchar
   - [X] gstr
   - [X] gsym
   - [X] gbstr - binary strings
   - [X] crat
   - [X] ccomplex
   - [X] ccons
   - [ ] cannotate - this is limited to creating T_CODE objects from a
     cons consisting of the binary bytecode string and literals
   - [ ] xdup
   - [ ] xmst
   - [ ] xmld
** TODO rewrite reader in Arc

** TODO write pretty printer in Arc
** TODO Additional I/O functions (src/io.c) [0/2]
   These other I/O functions are defined in standard Arc but are not
   necessary for CIEL or the reader, so we do them later.
    - [ ] File I/O [0/1]
       - [ ] pipe-from
    - [ ] stdin, stdout, stderr [0/5]
       - [ ] stdin
       - [ ] stdout
       - [ ] stderr
       - [ ] call-w/stdin
       - [ ] call-w/stdout
** TODO Formatted output
   In addition to Arc standard prf, there will also be a printf
   function which can be used to output strings according to a format
   string specified.  The usual conversion specifiers for standard C
   printf are available, with some additional non-standard ones:
   - r or m : no argument required - print the output of
     strerror(errno).
   - v : replace by the pretty-printed form of the argument.

   This is also the same format specification used by the error
   handler function signal_error.

** TODO Additional CIEL instructions [0/3]
   The following additional instructions are required by the final version:
   - [ ] gtab
   - [ ] ctadd
   - [ ] additional functionality for cannotate, so that it can, you
     know, actually perform type annotations...
* Enhancements
** TODO use ropes as strings
   This is a valuable enhancement as efficent string handling for very
   long strings will be very useful.
** TODO true OS-level threading
   The current interpreter is designed with green threads, scheduled
   by the virtual machine rather than native threads.
** TODO more advanced memory allocator
** TODO just in time compilation
** TODO PreArc?
   We do want to someday make a statically-typed, non-garbage
   collected dialect of Arc similar to Richard Kelsey's PreScheme, so
   we can write the entire runtime in Arc.

* Bugs
** TODO seek/tell may have 32/64 bit compatibility issues
   We might not have large file support on 32-bit builds.  This needs
   to be fixed, and we may need bignum support for arc_seek/arc_tell.


----------------------------------------------------------------------
Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
** TODO compiler seems to find patch offsets erroneously. [1/3]
   - [X] check uses of code-patch in generating continuation offsets for apply
   - [ ] check uses of code-patch in compiling if expressions
   - [ ] check uses of code-patch in compiling arguments
** TODO destructuring bind arguments aren't compiled correctly

/* 
  Copyright (C) 2009 Rafael R. Sevilla

  This file is part of CArc

  CArc is free software; you can redistribute it and/or modify it
  under the terms of the GNU Lesser General Public License as
  published by the Free Software Foundation; either version 3 of the
  License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA
  02110-1301 USA.
*/

#ifndef _CARC_H_

#define _CARC_H_

#include <inttypes.h>
#include <limits.h>
#include <stdarg.h>
@MP_HEADER@

typedef unsigned long value;
@MP_TYPE@;
@MPQ_TYPE@;

/* Characters are internally stored as UCS-4 */
typedef uint32_t Rune;

enum {
  S_FN,				/* fn syntax */
  S_US,				/* underscore */
  S_QUOTE,			/* quote */
  S_QQUOTE,			/* quasiquote */
  S_UNQUOTE,			/* unquote */
  S_UNQUOTESP,			/* unquote-splicing */
  S_COMPOSE,			/* compose */
  S_COMPLEMENT,			/* complement */
  S_T,				/* true */
  S_NIL,			/* nil */
  S_NO,				/* no */
  S_ANDF,			/* andf */
  S_GET,			/* get */
  S_THE_END			/* end of the line */
};

typedef struct carc {
  /* High-level allocation functions (allocate a cell, allocate a block) */
  value (*get_cell)(struct carc *);
  void *(*get_block)(struct carc *, size_t);
  void (*free_block)(struct carc *, void *); /* should be used only by gc */

  /* Low-level allocation functions (bypass memory management--use only
     from within an allocator or garbage collector) */
  void *(*mem_alloc)(size_t, int, void **);
  void (*mem_free)(void *, size_t);

  int over_percent;    /* additional free space over heap expansion */
  size_t minexp;       /* minimum expansion amount */

  /* Garbage collector */
  void (*rungc)(struct carc *);

  void (*signal_error)(struct carc *, const char *, ...);

  /* Reader */
  Rune (*readchar)(struct carc *, value, int *);
  void (*unreadchar)(struct carc *, value, Rune, int *);

  value vmthreads;		/* virtual machine thread objects */
  value vmqueue;		/* virtual machine run queue */

  unsigned long lastsym;	/* last symbol value */
  value symtable;		/* symbol table */
  value rsymtable;		/* reverse symbol table */
  value genv;			/* global environment */

  value syntax[S_THE_END];	/* syntax symbols */
  /* Table of MzScheme-like character constants */
  value charesctbl;		/* character escapes */
} carc;


/* Boxed type flags */
enum carc_types {
  T_NIL=0x00,
  T_TRUE=0x01,
  T_FIXNUM=0x02,
  T_BIGNUM=0x03,
  T_FLONUM=0x04,
  T_RATIONAL=0x05,
  T_COMPLEX=0x06,
  T_CHAR=0x07,
  T_STRING=0x08,
  T_SYMBOL=0x09,
  T_CONS=0x0a,
  T_TABLE=0x0b,
  T_TAGGED=0x0c,
  T_INPUT=0x0d,
  T_OUTPUT=0x0e,
  T_EXCEPTION=0x0f,
  T_SOCKET=0x10,
  T_THREAD=0x11,
  T_VECTOR=0x12,

  T_CONT = 0x13,		/* continuation */
  T_CLOS = 0x14,		/* closure */
  T_CODE = 0x15,		/* actual compiled code */
  T_ENV = 0x16,			/* environment */
  T_VMCODE = 0x17,		/* a VM code block */
  T_CCODE = 0x18,		/* a callable C function */

  T_NONE=0xff
};

enum threadstate {
  Talt,				/* blocked in alt instruction */
  Tsend,			/* waiting to send */
  Trecv,			/* waiting to recv */
  Tdebug,			/* debugged */
  Tready,			/* ready to be scheduled */
  Trelease,			/* interpreter released */
  Texiting,			/* exit because of kill or error */
  Tbroken,			/* thread crashed */
};


/* default thread timeslice */
#define PQUANTA 2048

/* default thread stack size */
#define TSTKSIZE 512

struct vmthread {
  /* virtual machine registers */
  value funr;		/* current function pointer register */
  value envr;		/* current environment register */
  value valr;		/* value of most recent instruction */
  value *sp;		/* stack pointer */
  value stack;		/* the actual stack itself (a vector) */
  value *stkbase;	/* base pointer of the stack */
  value *stktop;	/* top of value stack */
  int ip;		/* instruction pointer */
  int argc;		/* argument count register */
  
  /* thread scheduling variables */
  enum threadstate state;	/* thread state */
  int tid;			/* unique thread id */
  int quanta;		/* time slice */
  unsigned long long ticks;	/* time used */
};

#define TFUNR(t) (REP(t)._thread.funr)
#define TENVR(t) (REP(t)._thread.envr)
#define TVALR(t) (REP(t)._thread.valr)
#define TSP(t) (REP(t)._thread.sp)
#define TSTACK(t) (REP(t)._thread.stack)
#define TSBASE(t) (REP(t)._thread.stkbase)
#define TSTOP(t) (REP(t)._thread.stktop)
#define TIP(t) (REP(t)._thread.ip)
#define TSTATE(t) (REP(t)._thread.state)

/* Cells for boxed items */
struct cell {
  unsigned int _type;
  unsigned int _flags;
  union {
    struct {
      Rune *str;
      int length;
      int maxlength;
    } _str;
    Rune _char;
    @MP_BVALUE@;
    @MPQ_BVALUE@;
    double _flonum;
    struct {
      double re;
      double im;
    } _complex;
    struct {
      value car;
      value cdr;
    } _cons;
    struct {
      value *table;
      int hashbits;
      int nentries;
      int loadlimit;
    } _hash;
    /* The vector struct is actually used for lots of other stuff,
       such as compiled code, closures (which are three-vectors),
       and continuations (which are four-vectors). */
    struct {
      int length;
      value data[1];
    } _vector;
    struct vmthread _thread;
  } obj;
};

#define VALUE_SIZE @VALUE_SIZE@

/* Immediate values */
#define IMMEDIATE_MASK 0x03
#define IMMEDIATE_P(x) (((value)(x) & IMMEDIATE_MASK) || (value)(x) == CNIL || (value)(x) == CTRUE || (value)(x) == CUNDEF || (value)(x) == CUNBOUND)

#define SYMBOL_FLAG 0x0e
#define SYMBOL_P(x) (((value)(x)&0xff)==SYMBOL_FLAG)

/* Special constants -- non-zero and non-fixnum constants */
#define CNIL ((value)0)
#define CTRUE ((value)2)
#define CUNDEF ((value)4)	/* "tombstone" value */
#define CUNBOUND ((value)6)	/* returned when a hash has no binding value */

#define BTYPE(v) (((struct cell *)(v))->_type)
#define REP(v) (((struct cell *)(v))->obj)

#define NIL_P(v) ((v) == CNIL)

/* Definitions for Fixnums */
#define FIXNUM_MAX (LONG_MAX >> 1)
#define FIXNUM_MIN (-FIXNUM_MAX - 1)
#define FIXNUM_FLAG 0x01
#define INT2FIX(i) ((value)(((long)(i))<< 1 | FIXNUM_FLAG))
/* FIXME: portability to systems that don't preserve sign bit on
   right shifts. */
#define FIX2INT(x) ((long)(x) >> 1)
#define FIXNUM_P(f) (((long)(f))&FIXNUM_FLAG)

/* Definitions for conses */
#define car(x) (REP(x)._cons.car)
#define cdr(x) (REP(x)._cons.cdr)

/* Definitions for vectors */
#define VECLEN(x) (REP(x)._vector.length)
#define VINDEX(x,i) (REP(x)._vector.data[(i)])

/* Definitions for hashing */
typedef struct {
  unsigned long s[3];
  int state;
} carc_hs;			/* hash state */

static inline value cons(struct carc *c, value x, value y)
{
  value cc = c->get_cell(c);

  BTYPE(cc) = T_CONS;
  car(cc) = x;
  cdr(cc) = y;
  return(cc);
}

static inline int TYPE(value v)
{
  if (FIXNUM_P(v))
    return(T_FIXNUM);
  if (SYMBOL_P(v))
    return(T_SYMBOL);
  if (v == CNIL)
    return(T_NIL);
  if (v == CTRUE)
    return(T_TRUE);
  if (v == CUNDEF || v == CUNBOUND)
    return(T_NONE);
  if (!IMMEDIATE_P(v))
    return(BTYPE(v));

  /* Add more type values here */
  return(T_NONE);		/* unrecognized immediate type */
}

extern value carc_genv;		/* global environment */

extern value carc_mkflonum(carc *c, double val);
extern value carc_mkcomplex(carc *c, double re, double im);
extern value carc_mkbignuml(carc *c, long val);
extern value carc_mkrationall(carc *c, long num, long den);

extern double carc_coerce_flonum(carc *c, value v);
extern void carc_coerce_complex(carc *c, value v, double *re, double *im);
extern void carc_coerce_bignum(carc *c, value v, void *bignum);
extern void carc_coerce_rational(carc *c, value v, void *rat);
extern value carc_coerce_fixnum(carc *c, value v);

extern value carc_arith_op(carc *c, int opval, value args);
extern value carc_string2num(carc *c, value v);

extern value carc_is(carc *c, value v1, value v2);
extern value carc_equal(carc *c, value v1, value v2);

extern value scar(value x, value y);
extern value scdr(value x, value y);
extern value carc_list_append(value list, value val);

extern value carc_mkstring(carc *c, const Rune *data, int length);
extern value carc_mkstringc(carc *c, const char *s);
extern value carc_mkchar(carc *c, Rune r);
extern int carc_strlen(carc *c, value v);
extern Rune carc_strindex(carc *c, value v, int index);
extern value carc_strcat(carc *c, value v1, value v2);
extern Rune carc_strgetc(carc *c, value src, int *index);
extern void carc_strungetc(carc *c, int *index);
extern value carc_strchr(carc *c, value str, Rune ch);

extern void carc_hash_init(carc_hs *s, unsigned long level);
extern void carc_hash_update(carc_hs *s, unsigned long val);
extern unsigned long carc_hash_final(carc_hs *s, unsigned long len);
extern unsigned long carc_hash(carc *c, value v);
extern value carc_mkhash(carc *c, int hashbits);
extern value carc_hash_insert(carc *c, value hash, value key, value val);
extern value carc_hash_lookup(carc *c, value hash, value key);
extern value carc_hash_delete(carc *c, value hash, value key);
extern value carc_hash_iter(carc *c, value hash, void **context);
extern value carc_intern(carc *c, value name);
extern value carc_sym2name(carc *c, value sym);

extern value carc_mkvector(carc *c, int length);

extern value carc_read(carc *c, value src, int *index, value *pval);
extern value carc_ssexpand(carc *c, value sym);

extern void carc_vmengine(carc *c, value thr, int quanta);
extern value carc_mkthread(carc *c, value funptr, int stksize, int ip);

extern value carc_mkcont(carc *c, value offset, value funr, value envr);
extern value carc_mkenv(carc *c, value parent, int size);
extern void carc_apply(carc *c, value thr, value fun);
extern void carc_return(carc *c, value thr, value cont);


/* Set the default memory manager */
extern void carc_set_memmgr(carc *c);
extern void carc_init_reader(carc *c);

#endif

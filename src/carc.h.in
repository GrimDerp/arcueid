/* 
  Copyright (C) 2009 Rafael R. Sevilla

  This file is part of CArc

  CArc is free software; you can redistribute it and/or modify it
  under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA
  02110-1301 USA.
*/

#ifndef _CARC_H_

#define _CARC_H_

#include <inttypes.h>
#include <limits.h>
#include <stdarg.h>
@MP_HEADER@

typedef unsigned long value;
@MP_TYPE@;
@MPQ_TYPE@;

typedef struct carc {
  /* High-level allocation functions (allocate a cell, allocate a block) */
  value (*get_cell)(struct carc *);
  void *(*get_block)(struct carc *, size_t);
  void (*free_block)(struct carc *, void *); /* should be used only by gc */

  /* Low-level allocation functions (bypass memory management--use only
     from within an allocator or garbage collector) */
  void *(*mem_alloc)(size_t, int, void **);
  void (*mem_free)(void *, size_t);

  int over_percent;    /* additional free space over heap expansion */
  size_t minexp;       /* minimum expansion amount */

  void (*signal_error)(struct carc *, const char *, ...);
} carc;


/* Boxed type flags */
enum carc_types {
  T_NIL=0x00,
  T_TRUE=0x01,
  T_FIXNUM=0x02,
  T_BIGNUM=0x03,
  T_FLONUM=0x04,
  T_RATIONAL=0x05,
  T_COMPLEX=0x06,
  T_STRING=0x07,
  T_SYMBOL=0x08,
  T_FOREIGN_FUNC=0x09,
  T_CONS=0x0a,
  T_NONE=0xff
};

/* Cells for boxed items */
struct cell {
  unsigned int _type;
  unsigned int _flags;
  union {
    struct {
      uint32_t *str;		/* Strings are stored internally as UCS-4 */
      int length;
    } _str;
    @MP_BVALUE@;
    @MPQ_BVALUE@;
    double _flonum;
    struct {
      double re;
      double im;
    } _complex;
    struct {
      value car;
      value cdr;
    } _cons;
  } obj;
};

#define VALUE_SIZE @VALUE_SIZE@

/* Immediate values */
#define IMMEDIATE_MASK 0x03
#define IMMEDIATE_P(x) ((value)(x) & IMMEDIATE_MASK)

/* Special constants -- non-zero and non-fixnum constants */
#define CNIL ((value)0)
#define CTRUE ((value)2)

#define BTYPE(v) (((struct cell *)(v))->_type)
#define REP(v) (((struct cell *)(v))->obj)

#define NIL_P(v) ((v) == CNIL)

/* Definitions for Fixnums */
#define FIXNUM_MAX (LONG_MAX >> 1)
#define FIXNUM_MIN (-FIXNUM_MAX - 1)
#define FIXNUM_FLAG 0x01
#define INT2FIX(i) ((value)(((long)(i))<< 1 | FIXNUM_FLAG))
/* FIXME: portability to systems that don't preserve sign bit on
   right shifts. */
#define FIX2INT(x) ((long)(x) >> 1)
#define FIXNUM_P(f) (((long)(f))&FIXNUM_FLAG)

/* Definitions for conses */
#define car(x) (REP(x)._cons.car)
#define cdr(x) (REP(x)._cons.cdr)

static inline value cons(struct carc *c, value x, value y)
{
  value cc = c->get_cell(c);

  BTYPE(cc) = T_CONS;
  car(cc) = x;
  cdr(cc) = y;
  return(cc);
}

static inline int TYPE(value v)
{
  if (FIXNUM_P(v))
    return(T_FIXNUM);
  if (v == CNIL)
    return(T_NIL);
  if (v == CTRUE)
    return(T_TRUE);
  if (!IMMEDIATE_P(v))
    return(BTYPE(v));

  /* Add more type values here */
  return(T_NONE);		/* unrecognized immediate type */
}

extern value carc_mkflonum(carc *c, double val);
extern value carc_mkcomplex(carc *c, double re, double im);
extern value carc_mkbignuml(carc *c, long val);
extern value carc_mkrationall(carc *c, long num, long den);

extern double carc_coerce_flonum(carc *c, value v);
extern void carc_coerce_complex(carc *c, value v, double *re, double *im);
extern void carc_coerce_bignum(carc *c, value v, void *bignum);
extern void carc_coerce_rational(carc *c, value v, void *rat);
extern value carc_coerce_fixnum(carc *c, value v);

extern value carc_arith_op(carc *c, int opval, value args);

/* Set the default memory manager */
void carc_set_memmgr(carc *c);

#endif

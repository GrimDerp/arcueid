# 
# Copyright (C) 2009 Rafael R. Sevilla
#
# This file is part of CArc
#
# CArc is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA
# 02110-1301 USA.
#
AC_PREREQ(2.61)
AC_INIT([CArc], [0.1.0], [dido@imperium.ph])
AC_CONFIG_SRCDIR([src/alloc.c])

AM_INIT_AUTOMAKE([-Wall -Werror])
AC_CANONICAL_HOST
AC_CONFIG_MACRO_DIR([m4])

AC_PROG_CC
AC_PROG_LN_S
AC_PROG_INSTALL
AC_PROG_LIBTOOL
AM_PROG_CC_C_O

AC_C_CONST
AC_C_INLINE

AC_HEADER_STDC

MATH_LIBS=
AC_CHECK_HEADERS(math.h,, AC_MSG_FAILURE([Math library header seems to be missing.]))
AC_CHECK_LIB(m, fabs, MATH_LIBS=-lm, AC_MSG_FAILURE(Your math library seems to be incomplete))

AC_CHECK_SIZEOF(void *)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(int)
AC_MSG_CHECKING([that long and void * have the same size])
if test $ac_cv_sizeof_long == $ac_cv_sizeof_void_p
then
   AC_MSG_RESULT(yes)
else
   AC_MSG_RESULT(no)
   AC_MSG_FAILURE([CArc requires that sizeof(long) be the same as sizeof(void) to compile])
fi
VALUE_SIZE=$ac_cv_sizeof_void_p
AC_SUBST(VALUE_SIZE)

AC_ARG_ENABLE([unit-tests], [AS_HELP_STRING([--enable-unit-tests], [enable GNU Check unit test suites @<:@default=no@:>@])], [], [enable_unit_tests=no])
SRC_SUBDIRS=src
TEST_MAKEFILE=
if test "x$enable_unit_tests" != xno; then
  PKG_CHECK_MODULES([CHECK], [check >= 0.9.4],
  	            [SRC_SUBDIRS="$SRC_SUBDIRS . test"
		     TEST_MAKEFILE=test/Makefile])
fi
AC_SUBST(SRC_SUBDIRS)
  
AC_ARG_ENABLE([bignum], [AS_HELP_STRING([--disable-bignum], [disable bignum/rational support])], [], [enable_bignum=yes])
GMP_LIBS=
if test "x$enable_bignum" != xno; then
  AC_CHECK_HEADERS(gmp.h,, AC_MSG_FAILURE([Bignum (libgmp) test failed (--disable-bignum to disable)]))
  AC_CHECK_LIB(gmp, __gmpz_init, GMP_LIBS=-lgmp)
  if test "$GMP_LIBS" != ""; then
    MP_HEADER="#include <gmp.h>"
    MP_TYPE="typedef mpz_t bignum_t"
    MP_BVALUE="bignum_t _bignum"
    AC_SUBST(MP_HEADER)
    AC_SUBST(MP_TYPE)
    AC_SUBST(MP_BVALUE)
  else
    AC_MSG_FAILURE([Bignum (libgmp) test failed (--disable-bignum to disable)])
  fi
fi
LIBCARC_LIBS="-L${libdir} -lcarc $GMP_LIBS $MATH_LIBS"
AC_SUBST(LIBCARC_LIBS)
AC_CONFIG_HEADERS([config.h])
AC_CONFIG_FILES([carc.pc Makefile src/Makefile $TEST_MAKEFILE src/carc.h])
AC_OUTPUT
